#!/bin/sh
### BEGIN INIT INFO
# Provides:          weatherreceiver
# Required-Start:    $network $syslog
# Required-Stop:     $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

# chkconfig: - 50 50

PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin

DESC="Weather Receiver"
NAME=weatherreceiver
PNAME=weatherreceiver
DAEMON=/usr/local/sbin/$NAME
DAEMON_ARGS="-d"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# debian-specific stuff and locations
if [ -r /etc/debian_version ]; then
    
    # Read configuration variable file if it is present
    [ -r /etc/default/$NAME ] && . /etc/default/$NAME
    
    # Load the VERBOSE setting and other rcS variables
    . /lib/init/vars.sh
    
    # Define LSB log_* functions.
    . /lib/lsb/init-functions
    
    do_start()
    {
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
			  --exec $DAEMON --test > /dev/null 	|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
			  --exec $DAEMON -- $DAEMON_ARGS || return 2
    }
    
    do_stop()
    {
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
			  --pidfile $PIDFILE --exec $DAEMON
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	rm -f $PIDFILE
	return "$RETVAL"
    }
    
    # send a SIGHUP for reopening log files etc.
    do_reload()
    {
	start-stop-daemon --stop --quiet --signal 1 \
			  --pidfile $PIDFILE --exec $DAEMON
	return $?
    }
# redhat-specific stuff
elif [ -r /etc/redhat-release ]; then
    . /etc/rc.d/init.d/functions
    
    # pull in sysconfig settings
    [ -f /etc/sysconfig/$NAME ] && . /etc/sysconfig/$NAME
    
    lockfile=/var/lock/subsys/$NAME
    
    do_start()
    {
        daemon --pidfile="$PIDFILE" $DAEMON $DAEMON_ARGS
        RETVAL=$?
	[ $RETVAL -eq 0 ] && touch $lockfile
        return $RETVAL
    }
    
    do_stop()
    {
        killproc -p "$PIDFILE" $NAME
        RETVAL=$?
        [ $RETVAL -eq 0 ] && rm -f $lockfile
        return $RETVAL
    }
    
    do_reload()
    {
	killproc -p "$PIDFILE" $NAME -HUP
	return $?
    }
    
    log_daemon_msg()
    {
	echo -n "$@"
    }
    
    log_progress_msg()
    {
	echo -n "$@"
    }
    
    log_end_msg()
    {
	X=$1
	shift
	if [ $X = 0 ]; then
	    echo_success "$@"
	else
	    echo_failure "$@"
	fi
	echo
    }
    
    status_of_proc()
    {
	status "$NAME"
    }
fi


case "$1" in
    start)
	do_start
	case "$?" in
	    0) log_end_msg 0 ;;
	    1) log_progress_msg "already started"; log_end_msg 0 ;;
	    2) log_end_msg 1 ;;
	esac
	;;
    stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
	    0) log_end_msg 0 ;;
	    1) log_progress_msg "already stopped"; log_end_msg 0 ;;
	    2) log_end_msg 1 ;;
	esac
	;;
    status)
	status_of_proc "$NAME" "$NAME" && exit 0 || exit $?
	;;
    reload)
	do_reload
	case "$?" in 
	    0) log_end_msg 0 ;;
	    *) log_end_msg 1 ;;
	esac
	;;
    
    restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	    0|1)
		do_start
		case "$?" in
		    0) log_end_msg 0 ;;
		    1) log_end_msg 1 ;; # Old process is still running
		    *) log_end_msg 1 ;; # Failed to start
		esac
		;;
	    *)
  		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
    *)
	echo "Usage: $SCRIPTNAME {start|stop|reload|restart|status}" >&2
	exit 3
	;;
esac


